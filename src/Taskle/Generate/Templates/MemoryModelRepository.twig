<?php
{% include 'DocBlock.twig' %}

namespace {{ namespace }};

class {{ memoryRepository.classname }} implements
    {{ createRepository.classname }},
    {{ retrieveRepository.classname }},
    {{ updateRepository.classname }},
    {{ deleteRepository.classname }}
{
    protected {{ collection | variable }};

    public function __construct({{ collection | parameter }})
    {
        {{ collection | property }} = {{ collection | variable }};
    }

    public function create{{ singular | StudlyCase }}({{ entity | parameter }})
    {
        {{ collection | property }}->remove{{ singular | StudlyCase }}({{ entity | variable }});
        {{ collection | property }}->add{{ singular | StudlyCase }}({{ entity | variable }});
    }

    public function retrieve{{ plural | StudlyCase }}({{ filter | parameter }})
    {
        $limit = {{ filter | variable }}->getItemsPerPage();
        $offset = ({{ filter | variable }}->getCurrentPage() - 1) * $limit;

        {{ collection | variable }} = new {{ collection.classname }}();

        try {
            {{ collection | property }}->seek($offset);
        } catch (\OutOfBoundsException $e) {
            return {{ collection | variable }};
        }

        for ($i = 0; $i < $limit; $i++) {
            if ({{ collection | property }}->valid()) {
                {{ collection | variable }}->add{{ singular | StudlyCase }}({{ collection | property }}->current());
                {{ collection | property }}->next();
            } else {
                break;
            }
        }

        return {{ collection | variable }};
    }

    public function retrieve{{ singular | StudlyCase }}Count({{ filter | parameter }})
    {
        return count({{ collection | property }});
    }

    public function retrieve{{ singular | StudlyCase }}ById({{ identity | parameter }})
    {
        foreach ({{ collection | property }} as {{ entity | variable }}) {
            if ({{ entity | variable }}->getId()->sameValueAs({{ identity | variable }})) {
                return {{ entity | variable }};
            }
        }
        return false;
    }

    public function update{{ singular | StudlyCase }}({{ entity | parameter }})
    {
        {{ collection | property }}->remove{{ singular | StudlyCase }}({{ entity | variable }});
        {{ collection | property }}->add{{ singular | StudlyCase }}({{ entity | variable }});
    }

    public function delete{{ singular | StudlyCase }}ById({{ identity | parameter }})
    {
        foreach ({{ collection | property }} as {{ entity | variable }}) {
            if ({{ entity | variable }}->getId()->sameValueAs({{ identity | variable }})) {
                {{ collection | property }}->remove{{ singular | StudlyCase }}({{ entity | variable }});
            }
        }
    }
}
